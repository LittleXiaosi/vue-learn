(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{198:function(e,v,_){"use strict";_.r(v);var t=_(0),o=Object(t.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"vue的组件编译"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vue的组件编译"}},[e._v("#")]),e._v(" Vue的组件编译")]),e._v(" "),_("h2",{attrs:{id:"编译和渲染"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#编译和渲染"}},[e._v("#")]),e._v(" 编译和渲染")]),e._v(" "),_("p",[e._v("​\t我们上一篇文章，聊了关于Vue的响应式数据的源码实现，接下来聊一聊，Vue的组件编译，Vue的组件编译，有两个步骤分别是：")]),e._v(" "),_("ul",[_("li",[e._v("编译（Compiler）：把Template模板转化问Render Function，执行环境包括"),_("strong",[e._v("服务器")]),e._v("和"),_("strong",[e._v("浏览器")])]),e._v(" "),_("li",[e._v("渲染（Render）：把Render Function执行得到Vnode，Vnode渲染成为真实DOM节点。执行环境只有"),_("strong",[e._v("浏览器")])])]),e._v(" "),_("p",[e._v("另外一点值得注意的就是，如果我们在使用Vue Cli创建Vue项目的时候，会有一个"),_("code",[e._v("vue build")]),e._v("选项，这个选项会问你是需要创建：")]),e._v(" "),_("ul",[_("li",[e._v("Runtime+Compiler：32kb min+ gzip，支持网页编译"),_("code",[e._v("template")]),e._v("字符串。")]),e._v(" "),_("li",[e._v("Runtime-only：22kb min+gzip，所有"),_("code",[e._v("template")]),e._v("以"),_("code",[e._v(".vue")]),e._v("文件的形式，在"),_("code",[e._v("webpack build")]),e._v("的阶段编译成"),_("code",[e._v("rende")]),e._v("r函数")])]),e._v(" "),_("p",[e._v("两个不同的版本的核心区别就是"),_("strong",[e._v("编译")]),e._v("阶段的时机，只有"),_("code",[e._v("Runtime+Compiler")]),e._v("版本才会使用"),_("code",[e._v("Template")]),e._v("参数，并且是在"),_("code",[e._v("render")]),e._v("函数不存在的时候，"),_("code",[e._v("Runtime-only")]),e._v("的编译是靠"),_("code",[e._v("webpack")]),e._v(" 的 "),_("code",[e._v("vue-loader")]),e._v("，而不是靠Vue本身的编译体系，也就是说，使用"),_("code",[e._v("Runtime-only")]),e._v("的时候，编译已经完成，所有的"),_("code",[e._v(".vue")]),e._v("文件已经变成了对应的"),_("code",[e._v("render")]),e._v("函数。默认情况下，我们只需要使用"),_("code",[e._v("Runtime-only")]),e._v("版本就可以了。")]),e._v(" "),_("h2",{attrs:{id:"virtual-dom"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#virtual-dom"}},[e._v("#")]),e._v(" Virtual DOM")]),e._v(" "),_("p",[e._v("​\t\t对比于"),_("code",[e._v("javascript")]),e._v("对象，原生"),_("code",[e._v("DOM")]),e._v("对象是非常庞大的。一个简单的"),_("code",[e._v("<div>")]),e._v("节点就拥有246个属性，如果直接操作"),_("code",[e._v("DOM")]),e._v("，开销是要比操作"),_("code",[e._v("javascript")]),e._v("对象大很多的。所以这也是为什么Vue需要有一个"),_("code",[e._v("Virtual DOM")]),e._v("，但是"),_("code",[e._v("Virtual DOM")]),e._v("并不是"),_("code",[e._v("Vue")]),e._v("特有的概念，很多前端框架，比如"),_("code",[e._v("React")]),e._v("，都使用了"),_("code",[e._v("Virtual DOM")]),e._v("这个概念。")]),e._v(" "),_("p",[e._v("​\t\t另一个需要使用"),_("code",[e._v("Virtual DOM")]),e._v("的原因是，我们可以把"),_("code",[e._v("Virtual DOM")]),e._v("视为一个数据蓝图，当我们需要修改某个数据的时候，其实可以先对比一下蓝图，然后再修改"),_("strong",[e._v("差异")]),e._v("部分，这样也把"),_("code",[e._v("DOM")]),e._v("操作的开销降低不少。")]),e._v(" "),_("p",[e._v("##渲染步骤与生命周期")]),e._v(" "),_("h4",{attrs:{id:"渲染步骤"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#渲染步骤"}},[e._v("#")]),e._v(" 渲染步骤")]),e._v(" "),_("ol",[_("li",[e._v("Template--\x3eRender Function\n"),_("ul",[_("li",[_("code",[e._v(".vue")]),e._v("文件就是"),_("code",[e._v("Template")]),e._v("，是在"),_("code",[e._v("webpack")]),e._v("编译阶段转为"),_("code",[e._v("Render Function")])])])]),e._v(" "),_("li",[e._v("Render Function--\x3eVnode\n"),_("ul",[_("li",[_("code",[e._v("render function")]),e._v("的执行，就是在"),_("code",[e._v("updateComponent")]),e._v("函数执行阶段执行的（响应式原理里面提到了）")]),e._v(" "),_("li",[e._v("如果我们手动写了"),_("code",[e._v("Render Function")]),e._v("，其实本质上就是直接跳过了编译阶段（第一步），直接使用我们自定义的"),_("code",[e._v("Render Function")]),e._v("开始第二步的渲染阶段。")])])]),e._v(" "),_("li",[e._v("Vnode--\x3eBrowser\n"),_("ul",[_("li",[e._v("Vnode最后更新到Browser的时候，是差异更新的，不是全量替换")])])])]),e._v(" "),_("h4",{attrs:{id:"生命周期中的渲染"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#生命周期中的渲染"}},[e._v("#")]),e._v(" 生命周期中的渲染")]),e._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//生命周期")]),e._v("\n\n")])])])])}),[],!1,null,null,null);v.default=o.exports}}]);